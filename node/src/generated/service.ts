// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type ClientWritableStream,
  type handleBidiStreamingCall,
  type handleClientStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { DataChunk, StreamChunk } from "./common";
import { Empty } from "./google/protobuf/empty";
import { OrchestratorMessage } from "./orchestrator";
import { RunnerMessage } from "./runner";

export const protobufPackage = "rdfc";

/**
 * Message handling the status of a stream message
 * Either, identifying the message, or indicating a chunk has been handled
 */
export interface StreamControl {
  id?: number | undefined;
  processed?: number | undefined;
}

export interface LogMessage {
  level: string;
  msg: string;
  entities: string[];
  aliases: string[];
}

function createBaseStreamControl(): StreamControl {
  return { id: undefined, processed: undefined };
}

export const StreamControl: MessageFns<StreamControl> = {
  encode(message: StreamControl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.processed !== undefined) {
      writer.uint32(16).uint32(message.processed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamControl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.processed = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamControl {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      processed: isSet(object.processed) ? globalThis.Number(object.processed) : undefined,
    };
  },

  toJSON(message: StreamControl): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.processed !== undefined) {
      obj.processed = Math.round(message.processed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamControl>, I>>(base?: I): StreamControl {
    return StreamControl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamControl>, I>>(object: I): StreamControl {
    const message = createBaseStreamControl();
    message.id = object.id ?? undefined;
    message.processed = object.processed ?? undefined;
    return message;
  },
};

function createBaseLogMessage(): LogMessage {
  return { level: "", msg: "", entities: [], aliases: [] };
}

export const LogMessage: MessageFns<LogMessage> = {
  encode(message: LogMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== "") {
      writer.uint32(10).string(message.level);
    }
    if (message.msg !== "") {
      writer.uint32(18).string(message.msg);
    }
    for (const v of message.entities) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.aliases) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entities.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.aliases.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogMessage {
    return {
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      entities: globalThis.Array.isArray(object?.entities) ? object.entities.map((e: any) => globalThis.String(e)) : [],
      aliases: globalThis.Array.isArray(object?.aliases) ? object.aliases.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: LogMessage): unknown {
    const obj: any = {};
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.entities?.length) {
      obj.entities = message.entities;
    }
    if (message.aliases?.length) {
      obj.aliases = message.aliases;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogMessage>, I>>(base?: I): LogMessage {
    return LogMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogMessage>, I>>(object: I): LogMessage {
    const message = createBaseLogMessage();
    message.level = object.level ?? "";
    message.msg = object.msg ?? "";
    message.entities = object.entities?.map((e) => e) || [];
    message.aliases = object.aliases?.map((e) => e) || [];
    return message;
  },
};

export type RunnerService = typeof RunnerService;
export const RunnerService = {
  connect: {
    path: "/rdfc.Runner/connect",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: OrchestratorMessage) => Buffer.from(OrchestratorMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OrchestratorMessage.decode(value),
    responseSerialize: (value: RunnerMessage) => Buffer.from(RunnerMessage.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RunnerMessage.decode(value),
  },
  sendStreamMessage: {
    path: "/rdfc.Runner/sendStreamMessage",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: StreamChunk) => Buffer.from(StreamChunk.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StreamChunk.decode(value),
    responseSerialize: (value: StreamControl) => Buffer.from(StreamControl.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StreamControl.decode(value),
  },
  receiveStreamMessage: {
    path: "/rdfc.Runner/receiveStreamMessage",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: StreamControl) => Buffer.from(StreamControl.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StreamControl.decode(value),
    responseSerialize: (value: DataChunk) => Buffer.from(DataChunk.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DataChunk.decode(value),
  },
  logStream: {
    path: "/rdfc.Runner/logStream",
    requestStream: true,
    responseStream: false,
    requestSerialize: (value: LogMessage) => Buffer.from(LogMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LogMessage.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface RunnerServer extends UntypedServiceImplementation {
  connect: handleBidiStreamingCall<OrchestratorMessage, RunnerMessage>;
  sendStreamMessage: handleBidiStreamingCall<StreamChunk, StreamControl>;
  receiveStreamMessage: handleBidiStreamingCall<StreamControl, DataChunk>;
  logStream: handleClientStreamingCall<LogMessage, Empty>;
}

export interface RunnerClient extends Client {
  connect(): ClientDuplexStream<OrchestratorMessage, RunnerMessage>;
  connect(options: Partial<CallOptions>): ClientDuplexStream<OrchestratorMessage, RunnerMessage>;
  connect(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<OrchestratorMessage, RunnerMessage>;
  sendStreamMessage(): ClientDuplexStream<StreamChunk, StreamControl>;
  sendStreamMessage(options: Partial<CallOptions>): ClientDuplexStream<StreamChunk, StreamControl>;
  sendStreamMessage(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<StreamChunk, StreamControl>;
  receiveStreamMessage(): ClientDuplexStream<StreamControl, DataChunk>;
  receiveStreamMessage(options: Partial<CallOptions>): ClientDuplexStream<StreamControl, DataChunk>;
  receiveStreamMessage(
    metadata: Metadata,
    options?: Partial<CallOptions>,
  ): ClientDuplexStream<StreamControl, DataChunk>;
  logStream(callback: (error: ServiceError | null, response: Empty) => void): ClientWritableStream<LogMessage>;
  logStream(
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientWritableStream<LogMessage>;
  logStream(
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientWritableStream<LogMessage>;
  logStream(
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientWritableStream<LogMessage>;
}

export const RunnerClient = makeGenericClientConstructor(RunnerService, "rdfc.Runner") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RunnerClient;
  service: typeof RunnerService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
