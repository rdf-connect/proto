// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: runner.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Close, Message, MessageProcessed, StreamMessage } from "./common";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "rdfc";

export interface Processor {
  /** The URI of the Processor. */
  uri: string;
  /** The processor configuration, in JSON-LD */
  config: string;
  /** Processor arguments, in JSON-LD */
  arguments: string;
}

export interface RunnerMessage {
  proc?: Processor | undefined;
  start?: Empty | undefined;
  msg?: Message | undefined;
  close?: Close | undefined;
  streamMsg?:
    | StreamMessage
    | undefined;
  /**
   * The full pipeline in Turtle including all SHACL shapes and found
   * information
   */
  pipeline?: string | undefined;
  processed?: MessageProcessed | undefined;
}

function createBaseProcessor(): Processor {
  return { uri: "", config: "", arguments: "" };
}

export const Processor: MessageFns<Processor> = {
  encode(message: Processor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.config !== "") {
      writer.uint32(18).string(message.config);
    }
    if (message.arguments !== "") {
      writer.uint32(26).string(message.arguments);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Processor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.arguments = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Processor {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      config: isSet(object.config) ? globalThis.String(object.config) : "",
      arguments: isSet(object.arguments) ? globalThis.String(object.arguments) : "",
    };
  },

  toJSON(message: Processor): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.config !== "") {
      obj.config = message.config;
    }
    if (message.arguments !== "") {
      obj.arguments = message.arguments;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Processor>, I>>(base?: I): Processor {
    return Processor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Processor>, I>>(object: I): Processor {
    const message = createBaseProcessor();
    message.uri = object.uri ?? "";
    message.config = object.config ?? "";
    message.arguments = object.arguments ?? "";
    return message;
  },
};

function createBaseRunnerMessage(): RunnerMessage {
  return {
    proc: undefined,
    start: undefined,
    msg: undefined,
    close: undefined,
    streamMsg: undefined,
    pipeline: undefined,
    processed: undefined,
  };
}

export const RunnerMessage: MessageFns<RunnerMessage> = {
  encode(message: RunnerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proc !== undefined) {
      Processor.encode(message.proc, writer.uint32(10).fork()).join();
    }
    if (message.start !== undefined) {
      Empty.encode(message.start, writer.uint32(18).fork()).join();
    }
    if (message.msg !== undefined) {
      Message.encode(message.msg, writer.uint32(26).fork()).join();
    }
    if (message.close !== undefined) {
      Close.encode(message.close, writer.uint32(34).fork()).join();
    }
    if (message.streamMsg !== undefined) {
      StreamMessage.encode(message.streamMsg, writer.uint32(42).fork()).join();
    }
    if (message.pipeline !== undefined) {
      writer.uint32(50).string(message.pipeline);
    }
    if (message.processed !== undefined) {
      MessageProcessed.encode(message.processed, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunnerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunnerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proc = Processor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.start = Empty.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = Message.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.close = Close.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.streamMsg = StreamMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pipeline = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.processed = MessageProcessed.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunnerMessage {
    return {
      proc: isSet(object.proc) ? Processor.fromJSON(object.proc) : undefined,
      start: isSet(object.start) ? Empty.fromJSON(object.start) : undefined,
      msg: isSet(object.msg) ? Message.fromJSON(object.msg) : undefined,
      close: isSet(object.close) ? Close.fromJSON(object.close) : undefined,
      streamMsg: isSet(object.streamMsg) ? StreamMessage.fromJSON(object.streamMsg) : undefined,
      pipeline: isSet(object.pipeline) ? globalThis.String(object.pipeline) : undefined,
      processed: isSet(object.processed) ? MessageProcessed.fromJSON(object.processed) : undefined,
    };
  },

  toJSON(message: RunnerMessage): unknown {
    const obj: any = {};
    if (message.proc !== undefined) {
      obj.proc = Processor.toJSON(message.proc);
    }
    if (message.start !== undefined) {
      obj.start = Empty.toJSON(message.start);
    }
    if (message.msg !== undefined) {
      obj.msg = Message.toJSON(message.msg);
    }
    if (message.close !== undefined) {
      obj.close = Close.toJSON(message.close);
    }
    if (message.streamMsg !== undefined) {
      obj.streamMsg = StreamMessage.toJSON(message.streamMsg);
    }
    if (message.pipeline !== undefined) {
      obj.pipeline = message.pipeline;
    }
    if (message.processed !== undefined) {
      obj.processed = MessageProcessed.toJSON(message.processed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunnerMessage>, I>>(base?: I): RunnerMessage {
    return RunnerMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunnerMessage>, I>>(object: I): RunnerMessage {
    const message = createBaseRunnerMessage();
    message.proc = (object.proc !== undefined && object.proc !== null) ? Processor.fromPartial(object.proc) : undefined;
    message.start = (object.start !== undefined && object.start !== null) ? Empty.fromPartial(object.start) : undefined;
    message.msg = (object.msg !== undefined && object.msg !== null) ? Message.fromPartial(object.msg) : undefined;
    message.close = (object.close !== undefined && object.close !== null) ? Close.fromPartial(object.close) : undefined;
    message.streamMsg = (object.streamMsg !== undefined && object.streamMsg !== null)
      ? StreamMessage.fromPartial(object.streamMsg)
      : undefined;
    message.pipeline = object.pipeline ?? undefined;
    message.processed = (object.processed !== undefined && object.processed !== null)
      ? MessageProcessed.fromPartial(object.processed)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
