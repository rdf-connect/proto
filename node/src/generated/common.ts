// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "rdfc";

export interface Error {
  cause: string;
}

export interface Close {
  channel: string;
}

/** Central piece of data */
export interface DataChunk {
  data: Uint8Array;
}

/** This message contains data that is sent from a runner to the orchestrator */
export interface SendingMessage {
  localSequenceNumber: number;
  channel: string;
  data: Uint8Array;
}

/** This message contains data that is received by a runner from the orchestrator */
export interface ReceivingMessage {
  globalSequenceNumber: number;
  channel: string;
  data: Uint8Array;
}

/**
 * StreamMessage contains the sequenceNumber used to receive the streaming data
 * This message is received by the runner from the orchestrator
 */
export interface ReceivingStreamMessage {
  globalSequenceNumber: number;
  channel: string;
}

/**
 * Control message for a streaming message, to the producer
 * When the runner receives 0 it can send the first chunk
 * After each chunk it MUST await the next sequenceNumber
 */
export interface ReceivingStreamControl {
  streamSequenceNumber: number;
}

/**
 * Control message for a streaming message, from the consumer
 * First the consumer must identify which stream it wants to consume, with the
 * globalSequenceNumber
 * Then after handling a chunk, it must send how many chunks have been handled
 */
export interface SendingStreamControl {
  globalSequenceNumber?: number | undefined;
  streamSequenceNumber?: number | undefined;
}

/** The first message when a runner sends a streaming message to the orchestrator */
export interface StreamIdentify {
  localSequenceNumber: number;
  channel: string;
  runner: string;
}

/**
 * Wrapper around first StreamIdentify to identify the sendingStreamMessage
 * And the data that is part of the streaming message
 */
export interface StreamChunk {
  id?: StreamIdentify | undefined;
  data?: DataChunk | undefined;
}

/** The processing runner acknowledges that the full message has been handled */
export interface GlobalAck {
  globalSequenceNumber: number;
  channel: string;
}

/**
 * The producings runner is allowed to send a new message.
 * The consuming runner is finished
 */
export interface LocalAck {
  localSequenceNumber: number;
  channel: string;
}

function createBaseError(): Error {
  return { cause: "" };
}

export const Error: MessageFns<Error> = {
  encode(message: Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cause !== "") {
      writer.uint32(10).string(message.cause);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cause = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return { cause: isSet(object.cause) ? globalThis.String(object.cause) : "" };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.cause !== "") {
      obj.cause = message.cause;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.cause = object.cause ?? "";
    return message;
  },
};

function createBaseClose(): Close {
  return { channel: "" };
}

export const Close: MessageFns<Close> = {
  encode(message: Close, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(10).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Close {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClose();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Close {
    return { channel: isSet(object.channel) ? globalThis.String(object.channel) : "" };
  },

  toJSON(message: Close): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Close>, I>>(base?: I): Close {
    return Close.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Close>, I>>(object: I): Close {
    const message = createBaseClose();
    message.channel = object.channel ?? "";
    return message;
  },
};

function createBaseDataChunk(): DataChunk {
  return { data: new Uint8Array(0) };
}

export const DataChunk: MessageFns<DataChunk> = {
  encode(message: DataChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataChunk {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
  },

  toJSON(message: DataChunk): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataChunk>, I>>(base?: I): DataChunk {
    return DataChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataChunk>, I>>(object: I): DataChunk {
    const message = createBaseDataChunk();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSendingMessage(): SendingMessage {
  return { localSequenceNumber: 0, channel: "", data: new Uint8Array(0) };
}

export const SendingMessage: MessageFns<SendingMessage> = {
  encode(message: SendingMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.localSequenceNumber !== 0) {
      writer.uint32(8).uint32(message.localSequenceNumber);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendingMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendingMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.localSequenceNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendingMessage {
    return {
      localSequenceNumber: isSet(object.localSequenceNumber) ? globalThis.Number(object.localSequenceNumber) : 0,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: SendingMessage): unknown {
    const obj: any = {};
    if (message.localSequenceNumber !== 0) {
      obj.localSequenceNumber = Math.round(message.localSequenceNumber);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendingMessage>, I>>(base?: I): SendingMessage {
    return SendingMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendingMessage>, I>>(object: I): SendingMessage {
    const message = createBaseSendingMessage();
    message.localSequenceNumber = object.localSequenceNumber ?? 0;
    message.channel = object.channel ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseReceivingMessage(): ReceivingMessage {
  return { globalSequenceNumber: 0, channel: "", data: new Uint8Array(0) };
}

export const ReceivingMessage: MessageFns<ReceivingMessage> = {
  encode(message: ReceivingMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalSequenceNumber !== 0) {
      writer.uint32(8).uint32(message.globalSequenceNumber);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceivingMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceivingMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.globalSequenceNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceivingMessage {
    return {
      globalSequenceNumber: isSet(object.globalSequenceNumber) ? globalThis.Number(object.globalSequenceNumber) : 0,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: ReceivingMessage): unknown {
    const obj: any = {};
    if (message.globalSequenceNumber !== 0) {
      obj.globalSequenceNumber = Math.round(message.globalSequenceNumber);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceivingMessage>, I>>(base?: I): ReceivingMessage {
    return ReceivingMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceivingMessage>, I>>(object: I): ReceivingMessage {
    const message = createBaseReceivingMessage();
    message.globalSequenceNumber = object.globalSequenceNumber ?? 0;
    message.channel = object.channel ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseReceivingStreamMessage(): ReceivingStreamMessage {
  return { globalSequenceNumber: 0, channel: "" };
}

export const ReceivingStreamMessage: MessageFns<ReceivingStreamMessage> = {
  encode(message: ReceivingStreamMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalSequenceNumber !== 0) {
      writer.uint32(8).uint32(message.globalSequenceNumber);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceivingStreamMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceivingStreamMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.globalSequenceNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceivingStreamMessage {
    return {
      globalSequenceNumber: isSet(object.globalSequenceNumber) ? globalThis.Number(object.globalSequenceNumber) : 0,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
    };
  },

  toJSON(message: ReceivingStreamMessage): unknown {
    const obj: any = {};
    if (message.globalSequenceNumber !== 0) {
      obj.globalSequenceNumber = Math.round(message.globalSequenceNumber);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceivingStreamMessage>, I>>(base?: I): ReceivingStreamMessage {
    return ReceivingStreamMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceivingStreamMessage>, I>>(object: I): ReceivingStreamMessage {
    const message = createBaseReceivingStreamMessage();
    message.globalSequenceNumber = object.globalSequenceNumber ?? 0;
    message.channel = object.channel ?? "";
    return message;
  },
};

function createBaseReceivingStreamControl(): ReceivingStreamControl {
  return { streamSequenceNumber: 0 };
}

export const ReceivingStreamControl: MessageFns<ReceivingStreamControl> = {
  encode(message: ReceivingStreamControl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamSequenceNumber !== 0) {
      writer.uint32(16).uint32(message.streamSequenceNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceivingStreamControl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceivingStreamControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.streamSequenceNumber = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceivingStreamControl {
    return {
      streamSequenceNumber: isSet(object.streamSequenceNumber) ? globalThis.Number(object.streamSequenceNumber) : 0,
    };
  },

  toJSON(message: ReceivingStreamControl): unknown {
    const obj: any = {};
    if (message.streamSequenceNumber !== 0) {
      obj.streamSequenceNumber = Math.round(message.streamSequenceNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceivingStreamControl>, I>>(base?: I): ReceivingStreamControl {
    return ReceivingStreamControl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceivingStreamControl>, I>>(object: I): ReceivingStreamControl {
    const message = createBaseReceivingStreamControl();
    message.streamSequenceNumber = object.streamSequenceNumber ?? 0;
    return message;
  },
};

function createBaseSendingStreamControl(): SendingStreamControl {
  return { globalSequenceNumber: undefined, streamSequenceNumber: undefined };
}

export const SendingStreamControl: MessageFns<SendingStreamControl> = {
  encode(message: SendingStreamControl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalSequenceNumber !== undefined) {
      writer.uint32(8).uint32(message.globalSequenceNumber);
    }
    if (message.streamSequenceNumber !== undefined) {
      writer.uint32(16).uint32(message.streamSequenceNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendingStreamControl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendingStreamControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.globalSequenceNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.streamSequenceNumber = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendingStreamControl {
    return {
      globalSequenceNumber: isSet(object.globalSequenceNumber)
        ? globalThis.Number(object.globalSequenceNumber)
        : undefined,
      streamSequenceNumber: isSet(object.streamSequenceNumber)
        ? globalThis.Number(object.streamSequenceNumber)
        : undefined,
    };
  },

  toJSON(message: SendingStreamControl): unknown {
    const obj: any = {};
    if (message.globalSequenceNumber !== undefined) {
      obj.globalSequenceNumber = Math.round(message.globalSequenceNumber);
    }
    if (message.streamSequenceNumber !== undefined) {
      obj.streamSequenceNumber = Math.round(message.streamSequenceNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendingStreamControl>, I>>(base?: I): SendingStreamControl {
    return SendingStreamControl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendingStreamControl>, I>>(object: I): SendingStreamControl {
    const message = createBaseSendingStreamControl();
    message.globalSequenceNumber = object.globalSequenceNumber ?? undefined;
    message.streamSequenceNumber = object.streamSequenceNumber ?? undefined;
    return message;
  },
};

function createBaseStreamIdentify(): StreamIdentify {
  return { localSequenceNumber: 0, channel: "", runner: "" };
}

export const StreamIdentify: MessageFns<StreamIdentify> = {
  encode(message: StreamIdentify, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.localSequenceNumber !== 0) {
      writer.uint32(8).uint32(message.localSequenceNumber);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    if (message.runner !== "") {
      writer.uint32(26).string(message.runner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamIdentify {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamIdentify();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.localSequenceNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.runner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamIdentify {
    return {
      localSequenceNumber: isSet(object.localSequenceNumber) ? globalThis.Number(object.localSequenceNumber) : 0,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      runner: isSet(object.runner) ? globalThis.String(object.runner) : "",
    };
  },

  toJSON(message: StreamIdentify): unknown {
    const obj: any = {};
    if (message.localSequenceNumber !== 0) {
      obj.localSequenceNumber = Math.round(message.localSequenceNumber);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.runner !== "") {
      obj.runner = message.runner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamIdentify>, I>>(base?: I): StreamIdentify {
    return StreamIdentify.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamIdentify>, I>>(object: I): StreamIdentify {
    const message = createBaseStreamIdentify();
    message.localSequenceNumber = object.localSequenceNumber ?? 0;
    message.channel = object.channel ?? "";
    message.runner = object.runner ?? "";
    return message;
  },
};

function createBaseStreamChunk(): StreamChunk {
  return { id: undefined, data: undefined };
}

export const StreamChunk: MessageFns<StreamChunk> = {
  encode(message: StreamChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      StreamIdentify.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.data !== undefined) {
      DataChunk.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = StreamIdentify.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = DataChunk.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamChunk {
    return {
      id: isSet(object.id) ? StreamIdentify.fromJSON(object.id) : undefined,
      data: isSet(object.data) ? DataChunk.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: StreamChunk): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = StreamIdentify.toJSON(message.id);
    }
    if (message.data !== undefined) {
      obj.data = DataChunk.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamChunk>, I>>(base?: I): StreamChunk {
    return StreamChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamChunk>, I>>(object: I): StreamChunk {
    const message = createBaseStreamChunk();
    message.id = (object.id !== undefined && object.id !== null) ? StreamIdentify.fromPartial(object.id) : undefined;
    message.data = (object.data !== undefined && object.data !== null) ? DataChunk.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseGlobalAck(): GlobalAck {
  return { globalSequenceNumber: 0, channel: "" };
}

export const GlobalAck: MessageFns<GlobalAck> = {
  encode(message: GlobalAck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalSequenceNumber !== 0) {
      writer.uint32(8).uint32(message.globalSequenceNumber);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalAck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.globalSequenceNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalAck {
    return {
      globalSequenceNumber: isSet(object.globalSequenceNumber) ? globalThis.Number(object.globalSequenceNumber) : 0,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
    };
  },

  toJSON(message: GlobalAck): unknown {
    const obj: any = {};
    if (message.globalSequenceNumber !== 0) {
      obj.globalSequenceNumber = Math.round(message.globalSequenceNumber);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalAck>, I>>(base?: I): GlobalAck {
    return GlobalAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalAck>, I>>(object: I): GlobalAck {
    const message = createBaseGlobalAck();
    message.globalSequenceNumber = object.globalSequenceNumber ?? 0;
    message.channel = object.channel ?? "";
    return message;
  },
};

function createBaseLocalAck(): LocalAck {
  return { localSequenceNumber: 0, channel: "" };
}

export const LocalAck: MessageFns<LocalAck> = {
  encode(message: LocalAck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.localSequenceNumber !== 0) {
      writer.uint32(8).uint32(message.localSequenceNumber);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalAck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.localSequenceNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalAck {
    return {
      localSequenceNumber: isSet(object.localSequenceNumber) ? globalThis.Number(object.localSequenceNumber) : 0,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
    };
  },

  toJSON(message: LocalAck): unknown {
    const obj: any = {};
    if (message.localSequenceNumber !== 0) {
      obj.localSequenceNumber = Math.round(message.localSequenceNumber);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalAck>, I>>(base?: I): LocalAck {
    return LocalAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalAck>, I>>(object: I): LocalAck {
    const message = createBaseLocalAck();
    message.localSequenceNumber = object.localSequenceNumber ?? 0;
    message.channel = object.channel ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
