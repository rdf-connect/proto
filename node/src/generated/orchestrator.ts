// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: orchestrator.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Close, Error, Message, MessageProcessed } from "./common";

export const protobufPackage = "rdfc";

/** Tells the orchestrator that the processor is initialized */
export interface ProcessorInit {
  /** The URI of the Processor. */
  uri: string;
  error?: Error | undefined;
}

export interface Identify {
  uri: string;
}

export interface OrchestratorMessage {
  init?: ProcessorInit | undefined;
  close?: Close | undefined;
  identify?: Identify | undefined;
  msg?: Message | undefined;
  processed?: MessageProcessed | undefined;
}

function createBaseProcessorInit(): ProcessorInit {
  return { uri: "", error: undefined };
}

export const ProcessorInit: MessageFns<ProcessorInit> = {
  encode(message: ProcessorInit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessorInit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessorInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessorInit {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ProcessorInit): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessorInit>, I>>(base?: I): ProcessorInit {
    return ProcessorInit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessorInit>, I>>(object: I): ProcessorInit {
    const message = createBaseProcessorInit();
    message.uri = object.uri ?? "";
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseIdentify(): Identify {
  return { uri: "" };
}

export const Identify: MessageFns<Identify> = {
  encode(message: Identify, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Identify {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentify();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Identify {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: Identify): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Identify>, I>>(base?: I): Identify {
    return Identify.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Identify>, I>>(object: I): Identify {
    const message = createBaseIdentify();
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseOrchestratorMessage(): OrchestratorMessage {
  return { init: undefined, close: undefined, identify: undefined, msg: undefined, processed: undefined };
}

export const OrchestratorMessage: MessageFns<OrchestratorMessage> = {
  encode(message: OrchestratorMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.init !== undefined) {
      ProcessorInit.encode(message.init, writer.uint32(10).fork()).join();
    }
    if (message.close !== undefined) {
      Close.encode(message.close, writer.uint32(18).fork()).join();
    }
    if (message.identify !== undefined) {
      Identify.encode(message.identify, writer.uint32(26).fork()).join();
    }
    if (message.msg !== undefined) {
      Message.encode(message.msg, writer.uint32(34).fork()).join();
    }
    if (message.processed !== undefined) {
      MessageProcessed.encode(message.processed, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrchestratorMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrchestratorMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.init = ProcessorInit.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.close = Close.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.identify = Identify.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.msg = Message.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.processed = MessageProcessed.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrchestratorMessage {
    return {
      init: isSet(object.init) ? ProcessorInit.fromJSON(object.init) : undefined,
      close: isSet(object.close) ? Close.fromJSON(object.close) : undefined,
      identify: isSet(object.identify) ? Identify.fromJSON(object.identify) : undefined,
      msg: isSet(object.msg) ? Message.fromJSON(object.msg) : undefined,
      processed: isSet(object.processed) ? MessageProcessed.fromJSON(object.processed) : undefined,
    };
  },

  toJSON(message: OrchestratorMessage): unknown {
    const obj: any = {};
    if (message.init !== undefined) {
      obj.init = ProcessorInit.toJSON(message.init);
    }
    if (message.close !== undefined) {
      obj.close = Close.toJSON(message.close);
    }
    if (message.identify !== undefined) {
      obj.identify = Identify.toJSON(message.identify);
    }
    if (message.msg !== undefined) {
      obj.msg = Message.toJSON(message.msg);
    }
    if (message.processed !== undefined) {
      obj.processed = MessageProcessed.toJSON(message.processed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrchestratorMessage>, I>>(base?: I): OrchestratorMessage {
    return OrchestratorMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrchestratorMessage>, I>>(object: I): OrchestratorMessage {
    const message = createBaseOrchestratorMessage();
    message.init = (object.init !== undefined && object.init !== null)
      ? ProcessorInit.fromPartial(object.init)
      : undefined;
    message.close = (object.close !== undefined && object.close !== null) ? Close.fromPartial(object.close) : undefined;
    message.identify = (object.identify !== undefined && object.identify !== null)
      ? Identify.fromPartial(object.identify)
      : undefined;
    message.msg = (object.msg !== undefined && object.msg !== null) ? Message.fromPartial(object.msg) : undefined;
    message.processed = (object.processed !== undefined && object.processed !== null)
      ? MessageProcessed.fromPartial(object.processed)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
